// Generated by gencpp from file mav_planning_msgs/PolynomialSegment.msg
// DO NOT EDIT!


#ifndef MAV_PLANNING_MSGS_MESSAGE_POLYNOMIALSEGMENT_H
#define MAV_PLANNING_MSGS_MESSAGE_POLYNOMIALSEGMENT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace mav_planning_msgs
{
template <class ContainerAllocator>
struct PolynomialSegment_
{
  typedef PolynomialSegment_<ContainerAllocator> Type;

  PolynomialSegment_()
    : header()
    , num_coeffs(0)
    , segment_time()
    , x()
    , y()
    , z()
    , rx()
    , ry()
    , rz()
    , yaw()  {
    }
  PolynomialSegment_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , num_coeffs(0)
    , segment_time()
    , x(_alloc)
    , y(_alloc)
    , z(_alloc)
    , rx(_alloc)
    , ry(_alloc)
    , rz(_alloc)
    , yaw(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _num_coeffs_type;
  _num_coeffs_type num_coeffs;

   typedef ros::Duration _segment_time_type;
  _segment_time_type segment_time;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _x_type;
  _x_type x;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _y_type;
  _y_type y;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _z_type;
  _z_type z;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _rx_type;
  _rx_type rx;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _ry_type;
  _ry_type ry;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _rz_type;
  _rz_type rz;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _yaw_type;
  _yaw_type yaw;





  typedef boost::shared_ptr< ::mav_planning_msgs::PolynomialSegment_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mav_planning_msgs::PolynomialSegment_<ContainerAllocator> const> ConstPtr;

}; // struct PolynomialSegment_

typedef ::mav_planning_msgs::PolynomialSegment_<std::allocator<void> > PolynomialSegment;

typedef boost::shared_ptr< ::mav_planning_msgs::PolynomialSegment > PolynomialSegmentPtr;
typedef boost::shared_ptr< ::mav_planning_msgs::PolynomialSegment const> PolynomialSegmentConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mav_planning_msgs::PolynomialSegment_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mav_planning_msgs::PolynomialSegment_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mav_planning_msgs::PolynomialSegment_<ContainerAllocator1> & lhs, const ::mav_planning_msgs::PolynomialSegment_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.num_coeffs == rhs.num_coeffs &&
    lhs.segment_time == rhs.segment_time &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.rx == rhs.rx &&
    lhs.ry == rhs.ry &&
    lhs.rz == rhs.rz &&
    lhs.yaw == rhs.yaw;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mav_planning_msgs::PolynomialSegment_<ContainerAllocator1> & lhs, const ::mav_planning_msgs::PolynomialSegment_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mav_planning_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mav_planning_msgs::PolynomialSegment_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mav_planning_msgs::PolynomialSegment_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mav_planning_msgs::PolynomialSegment_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mav_planning_msgs::PolynomialSegment_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mav_planning_msgs::PolynomialSegment_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mav_planning_msgs::PolynomialSegment_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mav_planning_msgs::PolynomialSegment_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1bfc920140297f14773c46c1eacc4c1d";
  }

  static const char* value(const ::mav_planning_msgs::PolynomialSegment_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1bfc920140297f14ULL;
  static const uint64_t static_value2 = 0x773c46c1eacc4c1dULL;
};

template<class ContainerAllocator>
struct DataType< ::mav_planning_msgs::PolynomialSegment_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mav_planning_msgs/PolynomialSegment";
  }

  static const char* value(const ::mav_planning_msgs::PolynomialSegment_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mav_planning_msgs::PolynomialSegment_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"int32 num_coeffs        # order of the polynomial + 1, should match size of x[]\n"
"duration segment_time   # duration of the segment\n"
"float64[] x             # coefficients for the x-axis, INCREASING order\n"
"float64[] y             # coefficients for the y-axis, INCREASING order\n"
"float64[] z             # coefficients for the z-axis, INCREASING order\n"
"float64[] rx            # coefficients for the rotation x-vector, INCREASING order\n"
"float64[] ry            # coefficients for the rotation y-vector, INCREASING order\n"
"float64[] rz            # coefficients for the rotation z-vector, INCREASING order\n"
"## For backwards compatibility with underactuated (4DOF) commands):\n"
"float64[] yaw           # coefficients for the yaw, INCREASING order \n"
"                        \n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::mav_planning_msgs::PolynomialSegment_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mav_planning_msgs::PolynomialSegment_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.num_coeffs);
      stream.next(m.segment_time);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.rx);
      stream.next(m.ry);
      stream.next(m.rz);
      stream.next(m.yaw);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PolynomialSegment_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mav_planning_msgs::PolynomialSegment_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mav_planning_msgs::PolynomialSegment_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "header: ";
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "num_coeffs: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num_coeffs);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "segment_time: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.segment_time);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "x: ";
    if (v.x.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.x.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<double>::stream(s, true ? std::string() : indent + "    ", v.x[i]);
    }
    if (v.x.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "y: ";
    if (v.y.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.y.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<double>::stream(s, true ? std::string() : indent + "    ", v.y[i]);
    }
    if (v.y.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "z: ";
    if (v.z.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.z.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<double>::stream(s, true ? std::string() : indent + "    ", v.z[i]);
    }
    if (v.z.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "rx: ";
    if (v.rx.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.rx.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<double>::stream(s, true ? std::string() : indent + "    ", v.rx[i]);
    }
    if (v.rx.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "ry: ";
    if (v.ry.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.ry.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<double>::stream(s, true ? std::string() : indent + "    ", v.ry[i]);
    }
    if (v.ry.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "rz: ";
    if (v.rz.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.rz.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<double>::stream(s, true ? std::string() : indent + "    ", v.rz[i]);
    }
    if (v.rz.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "yaw: ";
    if (v.yaw.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.yaw.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<double>::stream(s, true ? std::string() : indent + "    ", v.yaw[i]);
    }
    if (v.yaw.empty() || true)
      s << "]";
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAV_PLANNING_MSGS_MESSAGE_POLYNOMIALSEGMENT_H
